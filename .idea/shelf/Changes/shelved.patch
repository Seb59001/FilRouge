Index: src/Controller/CreneauController.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\nnamespace App\\Controller;\r\n\r\nuse App\\Entity\\Cours;\r\nuse App\\Entity\\Creneau;\r\nuse App\\Form\\CreneauType;\r\nuse App\\Repository\\CoursRepository;\r\nuse App\\Repository\\CreneauRepository;\r\nuse DateInterval;\r\nuse DateTime;\r\nuse Doctrine\\ORM\\EntityManagerInterface;\r\nuse Knp\\Component\\Pager\\PaginatorInterface;\r\nuse Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\Security;\r\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\r\nuse Symfony\\Component\\HttpFoundation\\Request;\r\nuse Symfony\\Component\\HttpFoundation\\Response;\r\nuse Symfony\\Component\\Routing\\Annotation\\Route;\r\nuse Symfony\\Component\\Security\\Core\\User\\UserInterface;\r\nuse Symfony\\Component\\Security\\Http\\Attribute\\IsGranted;\r\n\r\n\r\nclass CreneauController extends AbstractController\r\n{\r\n    /**\r\n     *\r\n     * ce controlleur affiche les cours qui apartien a un user\r\n     *\r\n     * @param CreneauRepository $repository\r\n     * @param PaginatorInterface $paginator\r\n     * @param Request $request\r\n     * @return Response\r\n     */\r\n    #[Security(\"is_granted('ROLE_USER') or is_granted('ROLE_ADMIN')\")]\r\n    #[Route('/creneau', name: 'app_creneau', methods: ['GET'])]\r\n    public function index(CreneauRepository $repository): Response\r\n    {\r\n        $creneaux = $repository->findAll();\r\n        return $this->render('creneau/index.html.twig', [\r\n            'controller_name' => 'CreneauController',\r\n            'creneaux' => $creneaux\r\n        ]);\r\n    }\r\n\r\n\r\n    /**\r\n     *\r\n     * Ce cour nous permet d'ajouter un nouveaux creneau\r\n     *\r\n     * @param Request $request\r\n     * @param EntityManagerInterface $manager\r\n     * @return Response\r\n     *\r\n     */\r\n\r\n    #[Security(\"is_granted('ROLE_USER') or is_granted('ROLE_ADMIN')\")]\r\n    #[Route('/creneau/nouveau', name: 'new_creneau', methods: ['GET', 'POST'])]\r\n    public function new(Request $request, EntityManagerInterface $manager): Response\r\n    {\r\n\r\n        $user = $this->getUser();\r\n        $creneau = new Creneau();\r\n        $form = $this->createForm(CreneauType::class, $creneau, [\r\n            'user' => $user,\r\n        ]);\r\n\r\n\r\n        $form->handleRequest($request);\r\n\r\n\r\n        if ($form->isSubmitted() && $form->isValid()) {\r\n            $creneau = $form->getData();\r\n            // $debutPeriode = $creneau->getAppartientCours()->getDateDebut()->format('Y-m-d H:i:s');\r\n            $debut = $creneau->getDateDebutCours()->format('Y-m-d H:i:s');  \r\n            $fin = $creneau->getDateFinCours()->format('Y-m-d H:i:s');\r\n            $debutPeriode = $creneau->getAppartientCours()->getDateDebut();\r\n            $debutPeriode->setTime((int) $debut[11] . $debut[12], (int) $debut[14] . $debut[15], (int) $debut[17] . $debut[18]);\r\n            $debutPeriode = $debutPeriode->format('Y-m-d H:i:s');\r\n            $finPeriode = $creneau->getAppartientCours()->getDateFin();\r\n            $finPeriode->setTime((int) $fin[11] . $fin[12], (int) $fin[14] . $fin[15], (int) $fin[17] . $fin[18]);\r\n            $finPeriode = $finPeriode->format('Y-m-d H:i:s');\r\n\r\n\r\n            $finPeriode = $creneau->getAppartientCours()->getDateFin()->format('Y-m-d H:i:s');\r\n            // Vérifier si la date de début du créneau est antérieure à la date de début du cours\r\n            $debut = $creneau->getDateDebutCours()->format('Y-m-d H:i:s');\r\n            if ($debut < $debutPeriode) {\r\n                // Ajouter un message d'erreur à la session flash\r\n                $dateDebut = DateTime::createFromFormat('Y-m-d H:i:s', $debutPeriode);\r\n                $this->addFlash(\r\n                    'error',\r\n                    \"La date du créneau de cours ne peut pas être antérieure à la date de début du cours. Le cours commence le {$debutPeriode}\"\r\n                );\r\n\r\n\r\n                // Rediriger l'utilisateur vers la page du formulaire\r\n                return $this->redirectToRoute('new_creneau');\r\n            }\r\n            $fin = $creneau->getDateFinCours()->format('Y-m-d H:i:s');\r\n            if ($fin > $finPeriode) {\r\n                DateTime::createFromFormat('Y-m-d H:i:s', $finPeriode);\r\n                // Ajouter un message d'erreur à la session flash\r\n                $this->addFlash(\r\n                    'error',\r\n                    \"La date du créneau de cours ne peut pas être ultérieure à la date de fin du cours. Le cours se termine le {$finPeriode}\"\r\n                );\r\n\r\n\r\n                // Rediriger l'utilisateur vers la page du formulaire\r\n                return $this->redirectToRoute('new_creneau');\r\n            }\r\n\r\n            $manager->persist($creneau);\r\n            $manager->flush();\r\n\r\n            // Calculer le nombre de semaines entre la date de début et la date de fin\r\n            $dateDebut = DateTime::createFromFormat('Y-m-d H:i:s', $debutPeriode);\r\n            $dateFin = DateTime::createFromFormat('Y-m-d H:i:s', $finPeriode);\r\n            $diff = $dateDebut->diff($dateFin);\r\n\r\n\r\n\r\n            $nbSemaines = intval($diff->format('%a') / 7);\r\n            for ($i = 0; $i < $nbSemaines; $i++) {\r\n                // Obtenir les données du formulaire\r\n                $creneau = $form->getData();\r\n                $idCours = $creneau->getAppartientCours();\r\n                $debut = $creneau->getDateDebutCours();\r\n                $fin = $creneau->getDateFinCours();\r\n\r\n\r\n\r\n\r\n                // Créer un nouveau Creneau avec les dates modifiées\r\n                $user = $this->getUser();\r\n                $newCreneau = new Creneau();\r\n                $newCreneau->setAllDay(false);\r\n                $newCreneau->setAppartientCours($idCours);\r\n                $newCreneau->setDateDebutCours($debut);\r\n                $newCreneau->setDateFinCours($fin);\r\n\r\n\r\n\r\n                // Ajouter une semaine à la date de début et fin\r\n                $debut = $debut->modify(\"+7 day\");\r\n                $fin = $fin->modify(\"+7 day\");\r\n\r\n\r\n                $newData = [\r\n                    'date_debut_cours' => $debut,\r\n                    'date_fin_cours' => $fin,\r\n                    'all_day' => false,\r\n                    'appartientcours' => $idCours,\r\n                ];\r\n\r\n\r\n                $newForm = $this->createForm(CreneauType::class, $newCreneau, [\r\n                    'user' => $user,\r\n                ]);\r\n\r\n\r\n\r\n                $newRequest = Request::create('', 'POST', [\r\n                    'creneau' => $newData,\r\n                ]);\r\n\r\n                // Traite le nouveau formulaire avec la nouvelle instance de Request\r\n                $newForm->handleRequest($newRequest);\r\n\r\n\r\n\r\n                // Si le formulaire est soumis et valide, persiste le nouveau créneau\r\n                if ($newForm->isSubmitted()) {\r\n                    $newCreneau = $newForm->getData();\r\n                    $manager->persist($newCreneau);\r\n                    $manager->flush();\r\n                }\r\n            }\r\n\r\n\r\n            // Ajouter un message de succès à la session flash\r\n            $this->addFlash(\r\n                'success',\r\n                \"Les \" . ($nbSemaines + 1) . \" créneaux ont été insérés avec succès !\"\r\n            );\r\n\r\n            // Rediriger l'utilisateur vers la page des créneaux\r\n            return $this->redirectToRoute('app_creneau');\r\n        }\r\n\r\n\r\n        return $this->render('creneau/new.html.twig', [\r\n            'form' => $form->createView()\r\n        ]);\r\n    }\r\n\r\n\r\n    /**\r\n     *\r\n     * Ce controlleur permet de modifer un creneau\r\n     *\r\n     * @param Creneau $creneau\r\n     * @param EntityManagerInterface $manager\r\n     * @param Request $request\r\n     * @return Response\r\n     */\r\n\r\n    #[Security(\"is_granted('ROLE_USER') or is_granted('ROLE_ADMIN')\")]\r\n    #[Route('/creneau/edition/{id}', name: 'edit_creneau', methods: ['GET', 'POST'])]\r\n    public function edit(Creneau $creneau, EntityManagerInterface $manager, Request $request): Response\r\n    {\r\n\r\n        $user = $this->getUser();\r\n        $form = $this->createForm(CreneauType::class, $creneau, [\r\n            'user' => $user,\r\n        ]);\r\n        $form->handleRequest($request);\r\n        if ($form->isSubmitted() && $form->isValid()) {\r\n\r\n            $creneau = $form->getData();\r\n\r\n            $manager->persist($creneau);\r\n            $manager->flush();\r\n\r\n            $this->addFlash(\r\n                'success',\r\n                'Le créneau a été modifié avec succès ! '\r\n            );\r\n\r\n            return $this->redirectToroute('app_creneau');\r\n        }\r\n\r\n        return $this->render('creneau/edit.html.twig', [\r\n            'form' => $form\r\n        ]);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * ce controlleur permet de supprimer un creneau\r\n     *\r\n     * @param EntityManagerInterface $manager\r\n     * @param Creneau $creneau\r\n     * @return Response\r\n     *\r\n     */\r\n\r\n    #[IsGranted('ROLE_USER')]\r\n    #[Route('/creneau/suppression/{id}', name: 'delete_creneau', methods: ['GET', 'POST'])]\r\n    public function delete(EntityManagerInterface $manager, Creneau $creneau): Response\r\n    {\r\n\r\n        if (!$creneau) {\r\n            $this->addFlash(\r\n                'success',\r\n                \"Le créneau en question n'a pas été trouvé\"\r\n            );\r\n\r\n            return $this->redirectToroute('app_creneau');\r\n        }\r\n        $manager->remove($creneau);\r\n        $manager->flush();\r\n\r\n        $this->addFlash(\r\n            'success',\r\n            \"Le créneau a été supprimé avec succès !\"\r\n        );\r\n\r\n        return $this->redirectToroute('app_creneau');\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Controller/CreneauController.php b/src/Controller/CreneauController.php
--- a/src/Controller/CreneauController.php	(revision cc5957361484d8e079e94587f5be26539cd0829b)
+++ b/src/Controller/CreneauController.php	(date 1683726453803)
@@ -31,9 +31,15 @@
      * @param Request $request
      * @return Response
      */
+<<<<<<< HEAD
     #[Security("is_granted('ROLE_USER') or is_granted('ROLE_ADMIN')")]
     #[Route('/creneau', name: 'app_creneau', methods: ['GET'])]
     public function index(CreneauRepository $repository): Response
+=======
+    #[Security("is_granted('ROLE_USER')")]
+    #[Route('/creneau_user', name: 'app_creneau_user', methods: ['GET'])]
+    public function index(CreneauRepository $repository, PaginatorInterface $paginator, Request $request): Response
+>>>>>>> 6ed5cb4 (66)
     {
         $creneaux = $repository->findAll();
         return $this->render('creneau/index.html.twig', [
@@ -42,6 +48,24 @@
         ]);
     }
 
+<<<<<<< HEAD
+=======
+    #[Security("is_granted('ROLE_ADMIN')")]
+    #[Route('/creneau', name: 'app_creneau', methods: ['GET'])]
+    public function indexAdmin(CreneauRepository $repository, PaginatorInterface $paginator, Request $request): Response
+    {
+
+        $creneaux = $paginator->paginate(
+            $repository->findAll(),
+            $request->query->getInt('page', 1),
+            10
+        );
+        return $this->render('creneau/index.html.twig', [
+            'controller_name' => 'CreneauController',
+            'creneaux' => $creneaux
+        ]);
+    }
+>>>>>>> 6ed5cb4 (66)
 
     /**
      *
